/*
Problem Introduction
You are given a primitive calculator that can perform the following three operations with the current num-
ber x: multiply x by 2, multiply x by 3, or add 1 to x. Your goal is given a positive integer n, nd the
minimum number of operations needed to obtain the number n starting from the number 1.

Task. Given an integer n, compute the minimum number of operations needed to obtain the number n
starting from the number 1.
*/
#include <iostream>

#define Long unsigned long long
void showMinOperation(Long num);
int  MinOper(Long num, int i = 0);
int main() {	

	Long num;
	std::cout << "Enter The Number : ";
	std::cin >> num;
	showMinOperation(num);
	return 0;
}

// solution-1
void showMinOperation(Long num) {
	Long oper = 0;
	Long val = num;
	
	while (val > 1)
	{
		if (val % 3 == 0)
			val /= 3;
		else if (val % 2 == 0 && (val - 1) % 3 != 0)
			val /= 2;
		else
			val--;
		std::cout << val << " ";
		++oper;
	}
	
	std::cout << "\nMinimum NUmber of Operations : " << oper << std::endl;
	
}

// Recusrsive Solution
int  MinOper(Long num, int i ) {

	if (num < 2)
		return i;
	if (num % 3 == 0)
		return MinOper(num / 3,++i);
	else
		if (num % 2 == 0 && (num - 1) % 3 != 0)
			return MinOper(num / 2,++i);
		else
			return MinOper(--num,++i);
}

